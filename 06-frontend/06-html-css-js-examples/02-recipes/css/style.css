/* 
    CSS Reset

    Browsers often have some default CSS rules to display content.
    To override this and make sure that this display as we define
    them, we use this little rule to clear everything.
*/
*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;

    /* 
        Prefer off-white and off-black colors. Pure white (#FFFFFF)
        and black colors (#000000) tends to cause eye strain.
    */
    background-color: #f1ecd0;

    /* 
        Add 20px padding around the content inside the element's border
    */
    padding: 20px;

    /* Set text color */
    color: #3b3b3b;
}

header {
    /* 
        Place the header in the center of the body and bump the content below
        it by 20 px
    */
    text-align: center;
    margin-bottom: 20px;
}

main {
    /*
        We provide a maximum width for the primary content as stretching the entire
        width of the window would appear strange and we don't really have much content to show. 
    */
    max-width: 1200px;

    /*
        This takes the available space and divides it evenly on the left and right
        centering the content on the page.
    */
    margin: auto;
}

/* 
    Since we are styling the form, we can use an ID selector here as there should only
    be one form with that ID.
*/
#recipe-form {
    background-color: #f8f8f8;
    
    /* Add some breathing room */
    padding: 20px;

    /* Round the controls */
    border-radius: 8px;
    
    /* Add a very slight shadow to the form */
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);

    /* Add spacing between the next section */
    margin-bottom: 20px;
}

/* 
    Apply more specific formatting to all the controls
*/
#recipe-form input, #recipe-form textarea, #recipe-form button {
    /* This will make each control appear on the next line */
    display: block;
    width: 100%;
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

/* Further specify a color just for the button */
#recipe-form button {
    background-color:rgb(140, 218, 192);
}

/* The recipes will be shown in a grid layout */
#recipe-container {
    display: grid;

    /*
        Fair bit to unpack here...

        You can define columns manually one by one like this:

        grid-template-columns: 1f 1f 1f;

        This would create three columns each taking up 1 fraction of the
        available space in the grid so if we have a space of 300px each
        column takes up 100px. You can read more about fractional units
        here: https://css-tricks.com/introduction-fr-css-unit/

        Auto-fill is for making the gridlayout responsive. It will create
        as many columns as it can without horizontal scrolling. If we resize
        the browser, the number of columns will increase or decrease. An
        important detail to note is that Auto-fill is reserving the space
        even if the content isn't present. That's why only our pasta and
        pancakes meals show as though they are left aligned. A blank
        column is holding space. Don't believe me...use the inspector.

        However, we will never have more than 3 columns. The reason for this
        is we have 1200px in the main section to work with and each column will
        be at least 300 pixels. Wait! That should be 4 columns! Yes, but...
    */
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));

    /* 
        ...there is a gap of 20px between each column.
        Meaning: 300 + 20 + 300 + 20 + 300 = 960.
        If we added another column of 300px and a gap of 20px we'd be at 1260px
        of total space used when we only have 1200px.
    */
    gap: 20px;
}


.recipe-card {
    background-color: #f8f8f8;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    
    /* 
        Prevents content, in our case, the images from
        spilling out of the card.
    */
    overflow: hidden;

    /*
        We need to define this so we can place our 
        delete button on the card. By setting this
        property when we set the absolute position
        of the delete button it will be relative
        to the card, not the screen.
    */
    position: relative;
    padding-bottom: 10px;
}

.recipe-card img {
    width: 100%;
    height: 200px;

    /*
        This is used for image or video content to preserve the 
        original aspect ratio of the content, but fill the whole
        space and crop as needed. So our width is the full distance
        of the card, but the height is clipped to 200px to leave
        room for the ingredients.
    */
    object-fit: cover;
}

.recipe-card h3 {
    /*
        Top and bottom padding is 0. Left and right is 15px
    */
    padding: 0 15px;
}

.recipe-card ul {
    /*
        We need to pad more on the left and right to line up the
        bulleted list. Normally there is some browser defined padding,
        but remember we removed that, so we need to do it ourselves.
    */
    padding: 0 30px;
}

.delete-btn {
    /*
        We want to precisely position our button 10px off the top
        and right of the card. Note this only works because we have
        set the card to have relative positioning. If you comment
        that out. The delete button goes to the top right of the
        window.
    */
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: #ff4d4d;
    color: white;
    border: none;
    
    /*
        Make it a circle
    */
    border-radius: 50%;

    /*
        Give it a size
    */
    width: 30px;
    height: 30px;

    /*
        Change the cursor so you know to click it
    */
    cursor: pointer;

    /*
        Make the X larger to show
    */
    font-size: 16px;

    /*
        Ensures that the font is displayed at exactly
        16 pixels.
    */
    line-height: 1;
}

/* 
    This is a media query to check:
    1. The content is being viewed on a screen (usually its a screen, but
        what if we wanted to print the page...now we might change the layout
        to be more printer friendly).
    2. And that width of that screen is 768px or less
*/
@media screen and (max-width: 768px) {
    /*
        If the above condition holds, we adjust the grid to only show
        1 column to better fit the small screen.
    */
    #recipe-container {
        grid-template-columns: 1fr; /* Single column layout on smaller screens */
    }
}